; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\hw_config.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\hw_config.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\include -I.\RTE\_ADC2TEXTLCD -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0\Device\Include -D__UVISION_VERSION=524 -D_RTE_ -DSTM32F10X_HD --omf_browse=.\obj\hw_config.crf ..\source\hw_config.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  DMA_Configuration PROC
;;;33     
;;;34     void DMA_Configuration(void)
000000  b510              PUSH     {r4,lr}
;;;35     {
;;;36     
;;;37       DMA_DeInit(DMA1_Channel1);
000002  4865              LDR      r0,|L1.408|
000004  f7fffffe          BL       DMA_DeInit
;;;38     
;;;39       DMA_InitStructure.DMA_PeripheralBaseAddr = ADC1_DR_Address;
000008  4864              LDR      r0,|L1.412|
00000a  4965              LDR      r1,|L1.416|
00000c  6008              STR      r0,[r1,#0]  ; DMA_InitStructure
;;;40     
;;;41       DMA_InitStructure.DMA_MemoryBaseAddr = (u32)&ADCConvertedValue;
00000e  4865              LDR      r0,|L1.420|
000010  6048              STR      r0,[r1,#4]  ; DMA_InitStructure
;;;42     
;;;43       DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
000012  2000              MOVS     r0,#0
000014  6088              STR      r0,[r1,#8]  ; DMA_InitStructure
;;;44     
;;;45       DMA_InitStructure.DMA_BufferSize = 1;
000016  2001              MOVS     r0,#1
000018  60c8              STR      r0,[r1,#0xc]  ; DMA_InitStructure
;;;46     
;;;47       DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
00001a  2000              MOVS     r0,#0
00001c  6108              STR      r0,[r1,#0x10]  ; DMA_InitStructure
;;;48     
;;;49       DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Disable;
00001e  6148              STR      r0,[r1,#0x14]  ; DMA_InitStructure
;;;50     
;;;51       DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
000020  f44f7080          MOV      r0,#0x100
000024  6188              STR      r0,[r1,#0x18]  ; DMA_InitStructure
;;;52     
;;;53       DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
000026  0080              LSLS     r0,r0,#2
000028  61c8              STR      r0,[r1,#0x1c]  ; DMA_InitStructure
;;;54     
;;;55       DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
00002a  2020              MOVS     r0,#0x20
00002c  6208              STR      r0,[r1,#0x20]  ; DMA_InitStructure
;;;56     
;;;57       DMA_InitStructure.DMA_Priority = DMA_Priority_High;
00002e  0200              LSLS     r0,r0,#8
000030  6248              STR      r0,[r1,#0x24]  ; DMA_InitStructure
;;;58     
;;;59       DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
000032  2000              MOVS     r0,#0
000034  6288              STR      r0,[r1,#0x28]  ; DMA_InitStructure
;;;60     
;;;61       DMA_Init(DMA1_Channel1, &DMA_InitStructure);
000036  4858              LDR      r0,|L1.408|
000038  f7fffffe          BL       DMA_Init
;;;62     
;;;63       
;;;64     
;;;65       /* Enable DMA1 channel1 */
;;;66     
;;;67       DMA_Cmd(DMA1_Channel1, ENABLE);
00003c  2101              MOVS     r1,#1
00003e  4856              LDR      r0,|L1.408|
000040  f7fffffe          BL       DMA_Cmd
;;;68     
;;;69     
;;;70     }
000044  bd10              POP      {r4,pc}
;;;71     
                          ENDP

                  ADC_Configuration PROC
;;;87     
;;;88     void ADC_Configuration(void)
000046  b510              PUSH     {r4,lr}
;;;89     
;;;90     {
;;;91     
;;;92       ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
000048  2000              MOVS     r0,#0
00004a  4957              LDR      r1,|L1.424|
00004c  6008              STR      r0,[r1,#0]  ; ADC_InitStructure
;;;93     
;;;94       ADC_InitStructure.ADC_ScanConvMode = ENABLE;
00004e  2001              MOVS     r0,#1
000050  7108              STRB     r0,[r1,#4]
;;;95     
;;;96       ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
000052  7148              STRB     r0,[r1,#5]
;;;97     
;;;98       ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
000054  f44f2060          MOV      r0,#0xe0000
000058  6088              STR      r0,[r1,#8]  ; ADC_InitStructure
;;;99     
;;;100      ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
00005a  2000              MOVS     r0,#0
00005c  60c8              STR      r0,[r1,#0xc]  ; ADC_InitStructure
;;;101    
;;;102      ADC_InitStructure.ADC_NbrOfChannel = 1;
00005e  2001              MOVS     r0,#1
000060  7408              STRB     r0,[r1,#0x10]
;;;103    
;;;104      ADC_Init(ADC1, &ADC_InitStructure);
000062  484e              LDR      r0,|L1.412|
000064  384c              SUBS     r0,r0,#0x4c
000066  f7fffffe          BL       ADC_Init
;;;105    
;;;106    
;;;107      /* ADC1 regular channel10 configuration */ 
;;;108    
;;;109      ADC_RegularChannelConfig(ADC1, ADC_Channel_1, 1, ADC_SampleTime_55Cycles5);
00006a  2305              MOVS     r3,#5
00006c  2201              MOVS     r2,#1
00006e  4611              MOV      r1,r2
000070  484a              LDR      r0,|L1.412|
000072  384c              SUBS     r0,r0,#0x4c
000074  f7fffffe          BL       ADC_RegularChannelConfig
;;;110    
;;;111    
;;;112      /* Enable ADC1 DMA */
;;;113    
;;;114      ADC_DMACmd(ADC1, ENABLE);
000078  2101              MOVS     r1,#1
00007a  4848              LDR      r0,|L1.412|
00007c  384c              SUBS     r0,r0,#0x4c
00007e  f7fffffe          BL       ADC_DMACmd
;;;115    
;;;116      
;;;117    
;;;118      /* Enable ADC1 */
;;;119    
;;;120      ADC_Cmd(ADC1, ENABLE);
000082  2101              MOVS     r1,#1
000084  4845              LDR      r0,|L1.412|
000086  384c              SUBS     r0,r0,#0x4c
000088  f7fffffe          BL       ADC_Cmd
;;;121    
;;;122    
;;;123      /* Enable ADC1 reset calibaration register */   
;;;124    
;;;125      ADC_ResetCalibration(ADC1);
00008c  4843              LDR      r0,|L1.412|
00008e  384c              SUBS     r0,r0,#0x4c
000090  f7fffffe          BL       ADC_ResetCalibration
;;;126    
;;;127      /* Check the end of ADC1 reset calibration register */
;;;128    
;;;129      while(ADC_GetResetCalibrationStatus(ADC1));
000094  bf00              NOP      
                  |L1.150|
000096  4841              LDR      r0,|L1.412|
000098  384c              SUBS     r0,r0,#0x4c
00009a  f7fffffe          BL       ADC_GetResetCalibrationStatus
00009e  2800              CMP      r0,#0
0000a0  d1f9              BNE      |L1.150|
;;;130    
;;;131    
;;;132      /* Start ADC1 calibaration */
;;;133    
;;;134      ADC_StartCalibration(ADC1);
0000a2  483e              LDR      r0,|L1.412|
0000a4  384c              SUBS     r0,r0,#0x4c
0000a6  f7fffffe          BL       ADC_StartCalibration
;;;135    
;;;136      /* Check the end of ADC1 calibration */
;;;137    
;;;138      while(ADC_GetCalibrationStatus(ADC1));
0000aa  bf00              NOP      
                  |L1.172|
0000ac  483b              LDR      r0,|L1.412|
0000ae  384c              SUBS     r0,r0,#0x4c
0000b0  f7fffffe          BL       ADC_GetCalibrationStatus
0000b4  2800              CMP      r0,#0
0000b6  d1f9              BNE      |L1.172|
;;;139    
;;;140         
;;;141    
;;;142      /* Start ADC1 Software Conversion */ 
;;;143    
;;;144      ADC_SoftwareStartConvCmd(ADC1, ENABLE);
0000b8  2101              MOVS     r1,#1
0000ba  4838              LDR      r0,|L1.412|
0000bc  384c              SUBS     r0,r0,#0x4c
0000be  f7fffffe          BL       ADC_SoftwareStartConvCmd
;;;145    
;;;146    
;;;147    }
0000c2  bd10              POP      {r4,pc}
;;;148    
                          ENDP

                  RCC_Configuration PROC
;;;162    
;;;163    void RCC_Configuration(void)
0000c4  b510              PUSH     {r4,lr}
;;;164    
;;;165    {
;;;166    
;;;167      /* RCC system reset(for debug purpose) */
;;;168    
;;;169      RCC_DeInit();
0000c6  f7fffffe          BL       RCC_DeInit
;;;170    
;;;171    
;;;172      /* Enable HSE */
;;;173    
;;;174      RCC_HSEConfig(RCC_HSE_ON);
0000ca  f44f3080          MOV      r0,#0x10000
0000ce  f7fffffe          BL       RCC_HSEConfig
;;;175    
;;;176    
;;;177      /* Wait till HSE is ready */
;;;178    
;;;179      HSEStartUpStatus = RCC_WaitForHSEStartUp();
0000d2  f7fffffe          BL       RCC_WaitForHSEStartUp
0000d6  4935              LDR      r1,|L1.428|
0000d8  7008              STRB     r0,[r1,#0]
;;;180    
;;;181    
;;;182      if(HSEStartUpStatus == SUCCESS)
0000da  4608              MOV      r0,r1
0000dc  7800              LDRB     r0,[r0,#0]  ; HSEStartUpStatus
0000de  2801              CMP      r0,#1
0000e0  d12a              BNE      |L1.312|
;;;183    
;;;184      {
;;;185    
;;;186        /* Enable Prefetch Buffer */
;;;187    
;;;188        FLASH_PrefetchBufferCmd(FLASH_PrefetchBuffer_Enable);
0000e2  2010              MOVS     r0,#0x10
0000e4  f7fffffe          BL       FLASH_PrefetchBufferCmd
;;;189    
;;;190    
;;;191        /* Flash 2 wait state */
;;;192    
;;;193        FLASH_SetLatency(FLASH_Latency_2);
0000e8  2002              MOVS     r0,#2
0000ea  f7fffffe          BL       FLASH_SetLatency
;;;194    
;;;195      
;;;196    
;;;197        /* HCLK = SYSCLK */
;;;198    
;;;199        RCC_HCLKConfig(RCC_SYSCLK_Div1); 
0000ee  2000              MOVS     r0,#0
0000f0  f7fffffe          BL       RCC_HCLKConfig
;;;200    
;;;201      
;;;202    
;;;203        /* PCLK2 = HCLK */
;;;204    
;;;205        RCC_PCLK2Config(RCC_HCLK_Div1); 
0000f4  2000              MOVS     r0,#0
0000f6  f7fffffe          BL       RCC_PCLK2Config
;;;206    
;;;207    
;;;208        /* PCLK1 = HCLK/2 */
;;;209    
;;;210        RCC_PCLK1Config(RCC_HCLK_Div2);
0000fa  f44f6080          MOV      r0,#0x400
0000fe  f7fffffe          BL       RCC_PCLK1Config
;;;211    
;;;212    
;;;213        /* ADCCLK = PCLK2/4 */
;;;214    
;;;215        RCC_ADCCLKConfig(RCC_PCLK2_Div4); 
000102  f44f4080          MOV      r0,#0x4000
000106  f7fffffe          BL       RCC_ADCCLKConfig
;;;216    
;;;217      
;;;218    
;;;219        /* PLLCLK = 8MHz * 7 = 56 MHz */
;;;220    
;;;221        RCC_PLLConfig(RCC_PLLSource_HSE_Div1, RCC_PLLMul_7);
00010a  f44f11a0          MOV      r1,#0x140000
00010e  f44f3080          MOV      r0,#0x10000
000112  f7fffffe          BL       RCC_PLLConfig
;;;222    
;;;223    
;;;224        /* Enable PLL */ 
;;;225    
;;;226        RCC_PLLCmd(ENABLE);
000116  2001              MOVS     r0,#1
000118  f7fffffe          BL       RCC_PLLCmd
;;;227    
;;;228    
;;;229        /* Wait till PLL is ready */
;;;230    
;;;231        while(RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET)
00011c  bf00              NOP      
                  |L1.286|
00011e  2039              MOVS     r0,#0x39
000120  f7fffffe          BL       RCC_GetFlagStatus
000124  2800              CMP      r0,#0
000126  d0fa              BEQ      |L1.286|
;;;232    
;;;233        {
;;;234    
;;;235        }
;;;236    
;;;237    
;;;238        /* Select PLL as system clock source */
;;;239    
;;;240        RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
000128  2002              MOVS     r0,#2
00012a  f7fffffe          BL       RCC_SYSCLKConfig
;;;241    
;;;242    
;;;243        /* Wait till PLL is used as system clock source */
;;;244    
;;;245        while(RCC_GetSYSCLKSource() != 0x08)
00012e  bf00              NOP      
                  |L1.304|
000130  f7fffffe          BL       RCC_GetSYSCLKSource
000134  2808              CMP      r0,#8
000136  d1fb              BNE      |L1.304|
                  |L1.312|
;;;246    
;;;247        {
;;;248    
;;;249        }
;;;250    
;;;251      }
;;;252    
;;;253    
;;;254    /* Enable peripheral clocks --------------------------------------------------*/
;;;255    
;;;256      /* Enable DMA1 clock */
;;;257    
;;;258      RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
000138  2101              MOVS     r1,#1
00013a  4608              MOV      r0,r1
00013c  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;259    
;;;260    
;;;261      /* Enable ADC1 and GPIOA clock */
;;;262    
;;;263      RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1 | RCC_APB2Periph_GPIOA, ENABLE);
000140  2101              MOVS     r1,#1
000142  f44f7001          MOV      r0,#0x204
000146  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;264    
;;;265    
;;;266      /* Enable GPIOC clock */
;;;267      RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
00014a  2101              MOVS     r1,#1
00014c  2010              MOVS     r0,#0x10
00014e  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;268    
;;;269    
;;;270    }
000152  bd10              POP      {r4,pc}
;;;271    
                          ENDP

                  GPIO_Configuration PROC
;;;286    
;;;287    void GPIO_Configuration(void)
000154  b508              PUSH     {r3,lr}
;;;288    
;;;289    {
;;;290    
;;;291      GPIO_InitTypeDef GPIO_InitStructure;
;;;292    
;;;293    
;;;294      /*Configure PA.1 (ADC Channel1) as analog input -------------------------*/
;;;295    
;;;296      GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;
000156  2002              MOVS     r0,#2
000158  f8ad0000          STRH     r0,[sp,#0]
;;;297    
;;;298      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
00015c  2000              MOVS     r0,#0
00015e  f88d0003          STRB     r0,[sp,#3]
;;;299      
;;;300      GPIO_Init(GPIOA, &GPIO_InitStructure); 
000162  4669              MOV      r1,sp
000164  4812              LDR      r0,|L1.432|
000166  f7fffffe          BL       GPIO_Init
;;;301    
;;;302    
;;;303    
;;;304      /* Configure IO connected to GPIOC *********************/
;;;305      GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | 
00016a  f24070ff          MOV      r0,#0x7ff
00016e  f8ad0000          STRH     r0,[sp,#0]
;;;306                                    GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5 | 
;;;307    								GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_8 | 
;;;308    								GPIO_Pin_9 | GPIO_Pin_10 ;
;;;309      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
000172  2010              MOVS     r0,#0x10
000174  f88d0003          STRB     r0,[sp,#3]
;;;310      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000178  2003              MOVS     r0,#3
00017a  f88d0002          STRB     r0,[sp,#2]
;;;311      GPIO_Init(GPIOC, &GPIO_InitStructure);
00017e  4669              MOV      r1,sp
000180  480c              LDR      r0,|L1.436|
000182  f7fffffe          BL       GPIO_Init
;;;312    
;;;313    
;;;314    
;;;315    }
000186  bd08              POP      {r3,pc}
;;;316    
                          ENDP

                  NVIC_Configuration PROC
;;;331    
;;;332    void NVIC_Configuration(void)
000188  b510              PUSH     {r4,lr}
;;;333    
;;;334    {
;;;335    
;;;336    #ifdef  VECT_TAB_RAM  
;;;337    
;;;338      /* Set the Vector Table base location at 0x20000000 */ 
;;;339    
;;;340      NVIC_SetVectorTable(NVIC_VectTab_RAM, 0x0); 
;;;341    
;;;342    #else  /* VECT_TAB_FLASH  */
;;;343    
;;;344      /* Set the Vector Table base location at 0x08000000 */ 
;;;345    
;;;346      NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x0);   
00018a  2100              MOVS     r1,#0
00018c  f04f6000          MOV      r0,#0x8000000
000190  f7fffffe          BL       NVIC_SetVectorTable
;;;347    
;;;348    #endif
;;;349    
;;;350    }
000194  bd10              POP      {r4,pc}
;;;351    
                          ENDP

000196  0000              DCW      0x0000
                  |L1.408|
                          DCD      0x40020008
                  |L1.412|
                          DCD      0x4001244c
                  |L1.416|
                          DCD      DMA_InitStructure
                  |L1.420|
                          DCD      ADCConvertedValue
                  |L1.424|
                          DCD      ADC_InitStructure
                  |L1.428|
                          DCD      HSEStartUpStatus
                  |L1.432|
                          DCD      0x40010800
                  |L1.436|
                          DCD      0x40011000

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  ADC_InitStructure
                          %        20
                  DMA_InitStructure
                          %        44

                          AREA ||.data||, DATA, ALIGN=1

                  ADCConvertedValue
000000  0000              DCB      0x00,0x00
                  HSEStartUpStatus
000002  00                DCB      0x00
